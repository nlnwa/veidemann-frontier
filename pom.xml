<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.github.nlnwa</groupId>
    <artifactId>veidemann-frontier</artifactId>
    <version>0</version>
    <packaging>jar</packaging>

    <organization>
        <name>National Library of Norway</name>
        <url>http://nb.no</url>
    </organization>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <docker.tag>${project.version}</docker.tag>

        <veidemann.api.version>1.0.0-beta20</veidemann.api.version>
        <veidemann.commons.version>0.4.9</veidemann.commons.version>
        <veidemann.rethinkdbadapter.version>0.5.5</veidemann.rethinkdbadapter.version>

        <com.github.netflix.concurrency-limits.version>0.3.7</com.github.netflix.concurrency-limits.version>
        <log4j.version>2.13.3</log4j.version>
        <io.prometheus.version>0.8.0</io.prometheus.version>

        <!--Docker container versions for integration tests-->
        <rethinkdb.version>2.3.6</rethinkdb.version>
        <redis.version>5.0.7-alpine</redis.version>

        <!-- Docker auth credentials -->
        <!--suppress UnresolvedMavenProperty -->
        <docker.username>${env.DOCKER_USERNAME}</docker.username>
        <!--suppress UnresolvedMavenProperty -->
        <docker.password>${env.DOCKER_PASSWORD}</docker.password>
    </properties>

    <repositories>
        <repository>
            <id>jitpack.io</id>
            <url>https://jitpack.io</url>
        </repository>
        <repository>
            <id>oss.sonatype.org</id>
            <name>OSS Sonatype</name>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>com.github.nlnwa</groupId>
            <artifactId>veidemann-rethinkdbadapter</artifactId>
            <version>${veidemann.rethinkdbadapter.version}</version>
        </dependency>

        <dependency>
            <groupId>com.github.nlnwa</groupId>
            <artifactId>veidemann-api</artifactId>
            <version>${veidemann.api.version}</version>
        </dependency>

        <dependency>
            <groupId>com.github.nlnwa</groupId>
            <artifactId>veidemann-commons</artifactId>
            <version>${veidemann.commons.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.github.nlnwa</groupId>
                    <artifactId>webarchive-commons</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.3.0</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.github.netflix.concurrency-limits</groupId>
            <artifactId>concurrency-limits-core</artifactId>
            <version>${com.github.netflix.concurrency-limits.version}</version>
        </dependency>

        <dependency>
            <groupId>com.github.netflix.concurrency-limits</groupId>
            <artifactId>concurrency-limits-grpc</artifactId>
            <version>${com.github.netflix.concurrency-limits.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.5</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>30.0-jre</version>
        </dependency>

        <!-- Configuration framework -->
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
            <version>1.3.3</version>
        </dependency>

        <!-- Do all logging thru Log4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.21</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jul</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <!-- Prometheus dependencies -->
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
            <version>${io.prometheus.version}</version>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_hotspot</artifactId>
            <version>${io.prometheus.version}</version>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_httpserver</artifactId>
            <version>${io.prometheus.version}</version>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.8.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.27.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.19.1</version>
                </plugin>
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>0.29.0</version>
                </plugin>
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>3.0.0-M3</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>1C</forkCount>
                    <reuseForks>false</reuseForks>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <configuration>
                    <to>
                        <image>docker.io/norsknettarkiv/${project.artifactId}</image>
                        <tags>
                            <tag>${docker.tag}</tag>
                        </tags>
                        <auth>
                            <username>${docker.username}</username>
                            <password>${docker.password}</password>
                        </auth>
                    </to>
                    <container>
                        <ports>
                            <port>8080</port>
                            <port>5005</port>
                        </ports>
                        <volumes>
                            <volume>/workdir</volume>
                        </volumes>
                        <environment>
                            <!-- Make version number available for application as environment variable VERSION-->
                            <VERSION>${project.version}</VERSION>
                            <WORK_DIR>/workdir</WORK_DIR>
                        </environment>
                        <jvmFlags>
                            <jvmFlag>-Dfile.encoding=UTF-8</jvmFlag>
                        </jvmFlags>
                    </container>
                    <extraDirectories>
                        <paths>
                            <path>
                                <from>src/main/resources</from>
                                <into>/app</into>
                            </path>
                            <path>
                                <from>src/main/jib</from>
                                <into>/</into>
                            </path>
                        </paths>
                        <permissions>
                            <permission>
                                <file>/grpc_health_probe</file>
                                <mode>755</mode>
                            </permission>
                        </permissions>
                    </extraDirectories>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker-build</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>dockerBuild</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>docker-build-and-push</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>integration-tests</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>get-local-ip</id>
                                <goals>
                                    <goal>local-ip</goal>
                                </goals>
                                <configuration>
                                    <localIpProperty>local.ip</localIpProperty>
                                </configuration>
                            </execution>
                            <execution>
                                <id>reserve-network-port</id>
                                <goals>
                                    <goal>reserve-network-port</goal>
                                </goals>
                                <phase>process-resources</phase>
                                <configuration>
                                    <portNames>
                                        <portName>dnsresolver.port</portName>
                                        <portName>robotsevaluator.port</portName>
                                        <portName>ooshandler.port</portName>
                                        <portName>scopeChecker.port</portName>
                                    </portNames>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>prepare-tests</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>volume-create</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>remove-tests</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <removeVolumes>true</removeVolumes>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                            <startParallel>false</startParallel>
                            <volumes>
                                <volume>
                                    <name>frontier-rethink-data</name>
                                </volume>
                            </volumes>
                            <images>
                                <image>
                                    <name>rethinkdb:${rethinkdb.version}</name>
                                    <alias>db</alias>
                                    <run>
                                        <network>
                                            <mode>custom</mode>
                                            <name>frontier-test-net</name>
                                            <alias>db</alias>
                                        </network>
                                        <ports>
                                            <port>+db.host:db.port:28015</port>
                                        </ports>
                                        <volumes>
                                            <bind>
                                                <volume>frontier-rethink-data:/data</volume>
                                            </bind>
                                        </volumes>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>Server ready.*</log>
                                            <time>100000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>
                                        norsknettarkiv/veidemann-db-initializer:${veidemann.rethinkdbadapter.version}
                                    </name>
                                    <alias>db-initializer</alias>
                                    <run>
                                        <network>
                                            <mode>custom</mode>
                                            <name>frontier-test-net</name>
                                            <alias>db-initializer</alias>
                                        </network>
                                        <dependsOn>
                                            <container>db</container>
                                        </dependsOn>
                                        <env>
                                            <DB_HOST>db</DB_HOST>
                                            <DB_USER>admin</DB_USER>
                                        </env>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>DB initialized</log>
                                            <time>60000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>
                                        redis:${redis.version}
                                    </name>
                                    <alias>redis</alias>
                                    <run>
                                        <network>
                                            <mode>custom</mode>
                                            <name>frontier-test-net</name>
                                            <alias>redis</alias>
                                        </network>
                                        <ports>
                                            <port>+redis.host:redis.port:6379</port>
                                        </ports>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>Ready to accept connections</log>
                                            <time>60000</time>
                                        </wait>
                                    </run>
                                </image>
                                <image>
                                    <name>norsknettarkiv/veidemann-frontier</name>
                                    <alias>frontier</alias>
                                    <run>
                                        <network>
                                            <mode>custom</mode>
                                            <name>frontier-test-net</name>
                                            <alias>frontier</alias>
                                        </network>
                                        <ports>
                                            <port>+frontier.host:frontier.port:7700</port>
                                        </ports>
                                        <dependsOn>
                                            <container>db-initializer</container>
                                        </dependsOn>
                                        <env>
                                            <DB_HOST>db</DB_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <ROBOTS_EVALUATOR_HOST>${local.ip}</ROBOTS_EVALUATOR_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <ROBOTS_EVALUATOR_PORT>${robotsevaluator.port}</ROBOTS_EVALUATOR_PORT>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <DNS_RESOLVER_HOST>${local.ip}</DNS_RESOLVER_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <DNS_RESOLVER_PORT>${dnsresolver.port}</DNS_RESOLVER_PORT>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <OOS_HANDLER_HOST>${local.ip}</OOS_HANDLER_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <OOS_HANDLER_PORT>${ooshandler.port}</OOS_HANDLER_PORT>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <SCOPESERVICE_HOST>${local.ip}</SCOPESERVICE_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <SCOPESERVICE_PORT>${scopeChecker.port}</SCOPESERVICE_PORT>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <REDIS_HOST>redis</REDIS_HOST>
                                            <!--suppress UnresolvedMavenProperty -->
                                            <REDIS_PORT>6379</REDIS_PORT>
<!--                                            <LOCK_REDIS_PORT>${redis.port}</LOCK_REDIS_PORT>-->
                                        </env>
                                        <log>
                                            <enabled>true</enabled>
                                        </log>
                                        <wait>
                                            <log>Veidemann Frontier .* started</log>
                                            <time>30000</time>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <systemPropertyVariables>
                                <!--suppress UnresolvedMavenProperty -->
                                <db.host>${db.host}</db.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <db.port>${db.port}</db.port>
                                <!--suppress UnresolvedMavenProperty -->
                                <redis.host>${redis.host}</redis.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <redis.port>${redis.port}</redis.port>
                                <!--suppress UnresolvedMavenProperty -->
                                <frontier.host>${frontier.host}</frontier.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <frontier.port>${frontier.port}</frontier.port>
                                <dnsresolver.host>localhost</dnsresolver.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <dnsresolver.port>${dnsresolver.port}</dnsresolver.port>
                                <robotsevaluator.host>localhost</robotsevaluator.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <robotsevaluator.port>${robotsevaluator.port}</robotsevaluator.port>
                                <!--suppress UnresolvedMavenProperty -->
                                <ooshandler.host>localhost</ooshandler.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <ooshandler.port>${ooshandler.port}</ooshandler.port>
                                <!--suppress UnresolvedMavenProperty -->
                                <scopeChecker.host>localhost</scopeChecker.host>
                                <!--suppress UnresolvedMavenProperty -->
                                <scopeChecker.port>${scopeChecker.port}</scopeChecker.port>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
